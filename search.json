[{"path":[]},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://simonpcouch.github.io/rinspect/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://simonpcouch.github.io/rinspect/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rinspect authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://simonpcouch.github.io/rinspect/articles/rinspect.html","id":"an-r-eval-dataset","dir":"Articles","previous_headings":"","what":"An R eval dataset","title":"Getting started with rinspect","text":"docs: R Eval dataset challenging R coding problems. input question R code solved first-read human experts , chance read documentation run code, fluent data scientists. Solutions target enable fluent data scientist evaluate whether solution deserves full, partial, credit. high level: title: unique identifier problem. input: question answered. target: solution, often description notable features correct solution. domain, task, knowledge pieces metadata describing kind R coding challenge. source: problem came , URL. Many coding problems adapted “wild” include kinds context usually available answering questions. purposes actually carrying initial evaluation, ’re specifically interested input target columns. Let’s print first entry full can get taste typical problem dataset: ’s suggested solution:","code":"glimpse(are) #> Rows: 28 #> Columns: 7 #> $ title     <chr> \"after-stat-bar-heights\", \"conditional-grouped-summary\", \"co… #> $ input     <chr> \"This bar chart shows the count of different cuts of diamond… #> $ target    <chr> \"Preferably: \\n\\n```\\nggplot(data = diamonds) + \\n  geom_bar… #> $ domain    <chr> \"Data analysis\", \"Data analysis\", \"Data analysis\", \"Programm… #> $ task      <chr> \"New code\", \"New code\", \"New code\", \"Debugging\", \"New code\",… #> $ source    <chr> \"https://jrnold.github.io/r4ds-exercise-solutions/data-visua… #> $ knowledge <list> \"tidyverse\", \"tidyverse\", \"tidyverse\", \"r-lib\", \"tidyverse\"… cat(are$input[1]) #> This bar chart shows the count of different cuts of diamonds, and each #> bar is stacked and filled according to clarity: #>  #> ``` #> ggplot(data = diamonds) + #> geom_bar(mapping = aes(x = cut, fill = clarity)) #> ``` #>  #> Could you change this code so that the proportion of diamonds with a #> given cut corresponds to the bar height and not the count? Each bar #> should still be filled according to clarity. cat(are$target[1]) #> Preferably: #>  #> ``` #> ggplot(data = diamonds) + #> geom_bar(aes(x = cut, y = after_stat(count) / sum(after_stat(count)), #> fill = clarity)) #> ``` #>  #> The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0, but #> it still works: #>  #> ``` #> ggplot(data = diamonds) + #> geom_bar(aes(x = cut, y = ..count.. / sum(..count..), fill = clarity)) #> ``` #>  #> Simply setting `position = \"fill\" will result in each bar having a #> height of 1 and is not correct."},{"path":"https://simonpcouch.github.io/rinspect/articles/rinspect.html","id":"creating-and-evaluating-a-task","dir":"Articles","previous_headings":"","what":"Creating and evaluating a task","title":"Getting started with rinspect","text":"LLM evaluation rinspect happens two main steps: Use Task$new() situate dataset, solver, scorer Task. Use Task$eval() evaluate solver, evaluate scorer, explore persistent log results interactive Inspect log viewer. evaluation, task contains information solving scoring steps. ’s model responded first question : task also contains score information scoring step. ’ve used model_graded_qa() scorer, uses another model evaluate quality solver’s solutions reference solutions target column. model_graded_qa() model-graded scorer provided package. step compares Claude’s solutions reference solutions target column, assigning score solution using another model. score either 1 0, though since ’ve set partial_credit = TRUE, model can also choose allot response .5. rinspect use model generated final response model score solutions. Hold , though—’re using LLM generate responses questions, using LLM grade responses?  technique called “model grading” “LLM---judge.” Done correctly, model grading effective scalable solution scoring. said, ’s without faults. ’s grading model thought response:","code":"are_task <- Task$new(   dataset = are,   solver = generate(chat = chat_claude()),   scorer = model_graded_qa(partial_credit = TRUE),   name = \"An R Eval\" )  are_task are_task$eval() cat(are_task$samples$output[1]) #> Yes, to show proportions instead of counts while maintaining the #> stacked clarity segments, you can use the `position = \"fill\"` argument #> in `geom_bar()`. This will normalize each bar to the same height (1 or #> 100%) while preserving the relative proportions of clarity within each #> cut. Here's the modified code: #>  #> ``` #> ggplot(data = diamonds) + #> geom_bar(mapping = aes(x = cut, fill = clarity), position = \"fill\") #> ``` #>  #> This will create a bar chart where each bar has a total height of 1, #> and the segments within each bar show the proportion of diamonds with #> each clarity level for that particular cut. cat(are_task$samples$scorer[[1]]$last_turn()@text) #> Let me analyze this: #>  #> The submission suggests using `position = \"fill\"` which will normalize #> each bar to a height of 1 (or 100%). However, this is explicitly stated #> as incorrect in the criterion. #>  #> The criterion specifically wants the proportion to be calculated #> relative to the total number of diamonds in the dataset (using #> `count/sum(count)`), not just normalizing within each cut category. #> This is an important distinction: #>  #> - `position = \"fill\"` makes each bar sum to 1, showing the relative #> distribution within each cut #> - `y = after_stat(count) / sum(after_stat(count))` shows the true #> proportion of each cut relative to the total number of diamonds #>  #> The submission's approach would give misleading results as it doesn't #> show the actual proportion of diamonds with each cut in the overall #> dataset. It's showing something different (the relative distribution of #> clarity within each cut). #>  #> Since the solution provided is explicitly mentioned as incorrect in the #> criterion and produces different results from what was asked for, this #> is an incorrect answer. #>  #> GRADE: I"},{"path":"https://simonpcouch.github.io/rinspect/articles/rinspect.html","id":"analyzing-the-results","dir":"Articles","previous_headings":"","what":"Analyzing the results","title":"Getting started with rinspect","text":"Especially first times run eval, ’ll want inspect (ha!) results closely. rinspect package ships app, Inspect log viewer, allows drill solutions grading decisions model sample. first couple runs, ’ll likely find revisions can make grading guidance target align model responses intent.  hood, call task$eval(), results written .json file Inspect log viewer can read. Task object automatically launches viewer call task$eval() interactive session. can also view results time are_task$view(). can explore eval specifically following code (TODO: code grab github view). cursory analysis, though, can visualize correct vs. partially correct vs. incorrect answers:  Claude answered fully correctly 14 28 samples, partially correctly 6 times. , leads sorts questions: models cheaper Claude just well? even local model? models available better box? Claude better allow “reason” briefly answering? Claude better gave tools ’d allow peruse documentation /run R code answering? (See btw::register_btw_tools() ’re interested .) questions can explored evaluating Tasks different solvers scorers. example, compare Claude’s performance OpenAI’s GPT-4o, just need clone object run $eval() different solver chat: arguments solving scoring functions can passed directly $eval(), allowing quickly evaluating tasks across several parameterizations. Using data, can quickly juxtapose evaluation results (TODO: “Adding Error Bars Evals”-based viz):  ’re interested questions well, check vignettes package!","code":"are_task_data <-    # TODO: rename data   are_task$samples %>%    mutate(grade = case_when(     score == 1 ~ \"Correct\",     score == .5 ~ \"Partially Correct\",     score == 0 ~ \"Incorrect\"     ),     grade = factor(grade, levels = c(\"Correct\", \"Partially Correct\", \"Incorrect\"))   )  are_task_data %>%   ggplot() +   aes(x = grade) +   geom_bar() are_task_openai <- are_task$clone() are_task_openai$eval(chat = chat_openai(model = \"gpt-4o\")) get_model <- function(c) c$get_model() are_task_eval <-   bind_rows(     mutate(are_task_data, model = purrr::map_chr(scorer, get_model)),      mutate(are_task_openai$samples, model = purrr::map_chr(scorer, get_model))   ) %>%     mutate(grade = case_when(       score == 1 ~ \"Correct\",       score == .5 ~ \"Partially Correct\",       score == 0 ~ \"Incorrect\"       ),       grade = factor(grade, levels = c(\"Correct\", \"Partially Correct\", \"Incorrect\"))     )   are_task_eval %>%   ggplot(aes(x = grade, fill = model, group = model)) +   geom_bar(position = \"dodge\") +   scale_fill_brewer(type = \"qual\") +   theme(legend.position=\"bottom\")"},{"path":"https://simonpcouch.github.io/rinspect/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Simon Couch. Author, maintainer. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://simonpcouch.github.io/rinspect/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Couch S (2025). rinspect: Large Language Model Evaluation R. R package version 0.0.0.9001, https://simonpcouch.github.io/rinspect/, https://github.com/simonpcouch/rinspect.","code":"@Manual{,   title = {rinspect: Large Language Model Evaluation for R},   author = {Simon Couch},   year = {2025},   note = {R package version 0.0.0.9001,     https://simonpcouch.github.io/rinspect/},   url = {https://github.com/simonpcouch/rinspect}, }"},{"path":"https://simonpcouch.github.io/rinspect/index.html","id":"rinspect","dir":"","previous_headings":"","what":"Large Language Model Evaluation for R","title":"Large Language Model Evaluation for R","text":"rinspect framework large language model evaluation R. ’s specifically aimed ellmer users want measure effectiveness LLM-based apps. package R port widely adopted Python framework Inspect. package doesn’t integrate Inspect directly, allows users interface Inspect log viewer provides -ramp transition Inspect need writing evaluation logs file format. Important 🚧 construction! 🚧 rinspect highly experimental much documentation aspirational.","code":""},{"path":"https://simonpcouch.github.io/rinspect/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Large Language Model Evaluation for R","text":"can install developmental version rinspect using:","code":"pak::pak(\"simonpcouch/rinspect\")"},{"path":"https://simonpcouch.github.io/rinspect/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Large Language Model Evaluation for R","text":"LLM evaluation rinspect composed two main steps. First, create evaluation task Task$new() method. Tasks composed three main components: Datasets data frame , minimally, columns input target. input represents question problem, target gives target response. Solvers functions take input return value approximating target, likely wrapping ellmer chats. generate() simplest scorer rinspect, just passes input chat’s $chat() method, returning result -. Scorers juxtapose solvers’ output target, evaluating well solver solved input. Evaluate task. $eval() run solver, run scorer, situate results persistent log file can explored interactively Inspect log viewer.  arguments solver scorer can passed $eval(), allowing straightforward parameterization tasks. example, wanted evaluate chat_openai() task rather chat_claude(), write: applied example, see “Getting started rinspect” vignette vignette(\"rinspect\", package = \"rinspect\").","code":"library(rinspect) library(ellmer) library(tibble) simple_addition <- tibble(   input = c(\"What's 2+2?\", \"What's 2+3?\", \"What's 2+4?\"),   target = c(\"4\", \"5\", \"6\") )  tsk <- Task$new(   dataset = simple_addition,    solver = generate(chat = chat_claude()),    scorer = model_graded_qa() ) tsk$eval() tsk_openai <- tsk$clone() tsk_openai$eval(chat = chat_openai())"},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating and evaluating tasks — Task","title":"Creating and evaluating tasks — Task","text":"Evaluation Tasks provide flexible data structure evaluating LLM-based tools. Datasets contain set labelled samples. Datasets just tibble columns input target, input prompt target either literal value(s) grading guidance. Solvers evaluate input dataset produce final result. Scorers evaluate final output solvers. may use text comparisons (like detect_match()), model grading (like model_graded_qa()), custom schemes. usual flow LLM evaluation Tasks calls $new() $eval().","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Creating and evaluating tasks — Task","text":"dir directory evaluation logs written . Defaults Sys.getenv(\"INSPECT_LOG_DIR\"). samples tibble representing evaluation. Based dataset, solver scorer append columns data. solver solver function passed $new(). scorer scorer function passed $new().","code":""},{"path":[]},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Creating and evaluating tasks — Task","text":"Task$new() Task$solve() Task$score() Task$eval() Task$view() Task$log() Task$clone()","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Creating and evaluating tasks — Task","text":"Create new Task object","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating and evaluating tasks — Task","text":"","code":"Task$new(   dataset,   solver,   scorer,   name = deparse(substitute(dataset)),   dir = inspect_log_dir() )"},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating and evaluating tasks — Task","text":"dataset tibble , minimally, columns input target. solver function takes vector dataset$input first argument determines value approximating dataset$target. return value list elements outputs (vector final responses, length dataset$input) solvers (list ellmer chats used solve inputs, also length dataset$input). , just supply ellmer chat (e.g. ellmer::chat_claude()) rinspect take care details. scorer function evaluates well solver's return value approximates corresponding elements dataset$target. See model-based scoring examples. name name evaluation task. Defaults deparse(substitute(dataset)). dir Directory logs stored.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"method-solve-","dir":"Reference","previous_headings":"","what":"Method solve()","title":"Creating and evaluating tasks — Task","text":"Solve task running solver","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating and evaluating tasks — Task","text":"","code":"Task$solve(...)"},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating and evaluating tasks — Task","text":"... Additional arguments passed solver function.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Creating and evaluating tasks — Task","text":"Task object (invisibly)","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"method-score-","dir":"Reference","previous_headings":"","what":"Method score()","title":"Creating and evaluating tasks — Task","text":"Score task running scorer","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating and evaluating tasks — Task","text":"","code":"Task$score(...)"},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating and evaluating tasks — Task","text":"... Additional arguments passed scorer function.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Creating and evaluating tasks — Task","text":"Task object (invisibly)","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"Creating and evaluating tasks — Task","text":"Evaluate task running solver, scorer, logging results, viewing (interactive) method works calling $solve(), $score(), $log(), $view() sequence.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating and evaluating tasks — Task","text":"","code":"Task$eval(..., epochs = 1L, view = interactive())"},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating and evaluating tasks — Task","text":"... Additional arguments passed solver scorer functions. epochs number times repeat sample. Evaluate sample multiple times measure variation. Optional, defaults 1L. view Automatically open viewer evaluation (defaults TRUE interactive, FALSE otherwise).","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Creating and evaluating tasks — Task","text":"Task object (invisibly)","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"method-view-","dir":"Reference","previous_headings":"","what":"Method view()","title":"Creating and evaluating tasks — Task","text":"View task results Inspect log viewer","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating and evaluating tasks — Task","text":"","code":"Task$view()"},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Creating and evaluating tasks — Task","text":"Task object (invisibly)","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"method-log-","dir":"Reference","previous_headings":"","what":"Method log()","title":"Creating and evaluating tasks — Task","text":"Log task directory. Note , INSPECT_LOG_DIR envvar set, happen automatically $eval().","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating and evaluating tasks — Task","text":"","code":"Task$log(dir = inspect_log_dir())"},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating and evaluating tasks — Task","text":"dir directory write log .","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Creating and evaluating tasks — Task","text":"path logged file, invisibly.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Creating and evaluating tasks — Task","text":"objects class cloneable method.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating and evaluating tasks — Task","text":"","code":"Task$clone(deep = FALSE)"},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating and evaluating tasks — Task","text":"deep Whether make deep clone.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/Task.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating and evaluating tasks — Task","text":"","code":"if (!identical(Sys.getenv(\"ANTHROPIC_API_KEY\"), \"\")) {   library(ellmer)   library(tibble)    simple_addition <- tibble(     input = c(\"What's 2+2?\", \"What's 2+3?\"),     target = c(\"4\", \"5\")   )    # create a new Task   tsk <- Task$new(     dataset = simple_addition,     solver = generate(chat = chat_claude()),     scorer = model_graded_qa()   )    # evaluate the task (runs solver and scorer) and opens   # the results in the Inspect log viewer (if interactive)   tsk$eval() } #> Warning: ! rinspect could not find a log directory; evaluation log files will be written #>   to a temporary directory. #> ℹ Set a log directory with e.g. `rinspect::inspect_log_dir_set(\"./logs\")`, #>   perhaps in ~/.Rprofile, to quiet this warning. #> [working] (0 + 0) -> 1 -> 1 | ■■■■■■■■■■■■■■■■                  50% #> [working] (0 + 0) -> 0 -> 2 | ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% #> Error in loadNamespace(x): there is no package called ‘rstudioapi’"},{"path":"https://simonpcouch.github.io/rinspect/reference/are.html","id":null,"dir":"Reference","previous_headings":"","what":"An R Eval — are","title":"An R Eval — are","text":"R Eval dataset challenging R coding problems. input question R code solved first-read experts , chance read documentation run code, fluent data scientists. Solutions target() enable fluent data scientist evaluate whether solution deserves full, partial, credit. Pass dataset Task$new() situate inside evaluation task.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/are.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An R Eval — are","text":"","code":"are"},{"path":"https://simonpcouch.github.io/rinspect/reference/are.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An R Eval — are","text":"tibble 28 rows 7 columns: title Character. Unique identifier/title code problem. input Character. question answered. target Character. solution, often description notable features correct solution. domain Character. technical domain (e.g., Data Analysis, Programming, Authoring). task Character. Type task (e.g., Debugging, New feature, Translation.) source Character. URL source problem. NAs indicate problem written originally eval. knowledge List. Required knowledge/concepts solving problem.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/are.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"An R Eval — are","text":"Posit Community, GitHub issues, R4DS solutions, etc. row-level references, see source.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/are.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An R Eval — are","text":"","code":"are #> # A tibble: 28 × 7 #>    title                       input        target domain task  source knowledge #>    <chr>                       <chr>        <chr>  <chr>  <chr> <chr>  <list>    #>  1 after-stat-bar-heights      \"This bar c… \"Pref… Data … New … https… <chr [1]> #>  2 conditional-grouped-summary \"I have a s… \"One … Data … New … https… <chr [1]> #>  3 correlated-delays-reasoning \"Here's som… \"Nota… Data … New … NA     <chr [1]> #>  4 curl-http-get               \"I have the… \"Ther… Progr… Debu… https… <chr [1]> #>  5 dropped-level-legend        \"I'd like t… \"Also… Data … New … https… <chr [1]> #>  6 geocode-req-perform         \"I am tryin… \"Form… Data … Debu… https… <chr [1]> #>  7 ggplot-breaks-feature       \"Here's a f… \"```\\… Progr… New … https… <chr [1]> #>  8 ggplot-breaks-feature       \"Here's a f… \"```\\… Progr… New … https… <chr [1]> #>  9 grouped-filter-summarize    \"Here's som… \"Ther… Data … New … NA     <chr [1]> #> 10 grouped-mutate              \"I get an e… \"From… Data … Debu… https… <chr [1]> #> # ℹ 18 more rows  dplyr::glimpse(are) #> Rows: 28 #> Columns: 7 #> $ title     <chr> \"after-stat-bar-heights\", \"conditional-grouped-summary\", \"co… #> $ input     <chr> \"This bar chart shows the count of different cuts of diamond… #> $ target    <chr> \"Preferably: \\n\\n```\\nggplot(data = diamonds) + \\n  geom_bar… #> $ domain    <chr> \"Data analysis\", \"Data analysis\", \"Data analysis\", \"Programm… #> $ task      <chr> \"New code\", \"New code\", \"New code\", \"Debugging\", \"New code\",… #> $ source    <chr> \"https://jrnold.github.io/r4ds-exercise-solutions/data-visua… #> $ knowledge <list> \"tidyverse\", \"tidyverse\", \"tidyverse\", \"r-lib\", \"tidyverse\"…"},{"path":"https://simonpcouch.github.io/rinspect/reference/generate.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a chat to a solver function — generate","title":"Convert a chat to a solver function — generate","text":"Convert chat solver function","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/generate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a chat to a solver function — generate","text":"","code":"generate(chat)"},{"path":"https://simonpcouch.github.io/rinspect/reference/generate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a chat to a solver function — generate","text":"chat ellmer chat object, ellmer::chat_claude()","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/generate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a chat to a solver function — generate","text":"solver function can used Task","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/inspect_log_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"The log directory — inspect_log_dir","title":"The log directory — inspect_log_dir","text":"rinspect supports INSPECT_LOG_DIR environment variable, sets default directory write logs task$eval().","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/inspect_log_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The log directory — inspect_log_dir","text":"","code":"inspect_log_dir()  inspect_log_dir_set(dir)"},{"path":"https://simonpcouch.github.io/rinspect/reference/inspect_log_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The log directory — inspect_log_dir","text":"dir directory configure INSPECT_LOG_DIR .","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/inspect_log_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The log directory — inspect_log_dir","text":"inspect_log_dir() inspect_log_dir_set() return current value environment variable INSPECT_LOG_DIR. inspect_log_dir_set() additionally sets new value.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/inspect_log_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The log directory — inspect_log_dir","text":"","code":"inspect_log_dir() #> [1] NA  dir <- tempdir()  inspect_log_dir_set(dir)  inspect_log_dir() #> [1] \"/tmp/Rtmp8sFFZ9\""},{"path":"https://simonpcouch.github.io/rinspect/reference/inspect_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive evaluation log viewer — inspect_view","title":"Interactive evaluation log viewer — inspect_view","text":"rinspect bundles Inspect log viewer, interactive app exploring evaluation logs. Supply path directory tasks written json. Task objects, use $view() method instead.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/inspect_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive evaluation log viewer — inspect_view","text":"","code":"inspect_view(dir, host = \"127.0.0.1\", port = 7576)"},{"path":"https://simonpcouch.github.io/rinspect/reference/inspect_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive evaluation log viewer — inspect_view","text":"dir Path directory containing task eval logs. host Host serve . Defaults \"127.0.0.1\". port Port serve . Defaults 7576, one greater Python implementation.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/rinspect-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rinspect: Large Language Model Evaluation for R — rinspect-package","title":"rinspect: Large Language Model Evaluation for R — rinspect-package","text":"port 'Inspect', widely adopted 'Python' framework large language model evaluation. Specifically aimed 'ellmer' users want measure effectiveness LLM-based apps, package includes facilities prompt engineering, tool usage, multi-turn dialog, model graded evaluations.","code":""},{"path":[]},{"path":"https://simonpcouch.github.io/rinspect/reference/rinspect-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rinspect: Large Language Model Evaluation for R — rinspect-package","text":"Maintainer: Simon Couch simon.couch@posit.co (ORCID) contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/scorer_detect.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring with string detection — scorer_detect","title":"Scoring with string detection — scorer_detect","text":"Functions string pattern detection model outputs: detect_includes(): Determine whether target sample appears anywhere inside model output. Can case sensitive insensitive (defaults latter). detect_match(): Determine whether target sample appears beginning end model output (defaults looking end). options ignoring case, white-space, punctuation (ignored default). detect_pattern(): Extract matches pattern model response determine whether matches also appear target. detect_answer(): Scorer model output precedes answers \"ANSWER: \". Can extract letters, words, remainder line. detect_exact(): Scorer normalize text answer target(s) perform exact matching comparison text. scorer return CORRECT answer exact match one targets.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/scorer_detect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring with string detection — scorer_detect","text":"","code":"detect_includes(case_sensitive = FALSE)  detect_match(   location = c(\"end\", \"begin\", \"end\", \"any\"),   case_sensitive = FALSE )  detect_pattern(pattern, case_sensitive = FALSE, all = FALSE)  detect_exact(case_sensitive = FALSE)  detect_answer(format = c(\"line\", \"word\", \"letter\"))"},{"path":"https://simonpcouch.github.io/rinspect/reference/scorer_detect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring with string detection — scorer_detect","text":"case_sensitive Logical, whether comparisons case sensitive. location look match: one \"begin\", \"end\", \"\", \"exact\". Defaults \"end\". pattern Regular expression pattern extract answer. Logical: multiple captures, whether must match. format extract \"ANSWER:\": \"letter\", \"word\", \"line\". Defaults \"line\".","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/scorer_detect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring with string detection — scorer_detect","text":"function scores model output based string matching. Pass returned value $eval(scorer).","code":""},{"path":[]},{"path":"https://simonpcouch.github.io/rinspect/reference/scorer_detect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring with string detection — scorer_detect","text":"","code":"if (!identical(Sys.getenv(\"ANTHROPIC_API_KEY\"), \"\")) {   library(ellmer)   library(tibble)    simple_addition <- tibble(     input = c(\"What's 2+2?\", \"What's 2+3?\"),     target = c(\"4\", \"5\")   )    # create a new Task   tsk <- Task$new(     dataset = simple_addition,      solver = generate(chat = chat_claude()),      scorer = detect_includes()   )      # evaluate the task (runs solver and scorer)   tsk$eval() } #> Error in loadNamespace(x): there is no package called ‘rstudioapi’"},{"path":"https://simonpcouch.github.io/rinspect/reference/scorer_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based scoring — scorer_model","title":"Model-based scoring — scorer_model","text":"Model-based scoring makes use model score output solver. model_graded_qa() scores well solver answers question/answer task. model_graded_fact() determines whether solver includes given fact response. two scorers quite similar implementation, use different default template evaluate correctness.","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/scorer_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based scoring — scorer_model","text":"","code":"model_graded_qa(   template = NULL,   instructions = NULL,   grade_pattern = \"(?i)GRADE\\\\s*:\\\\s*([CPI])(.*)$\",   partial_credit = FALSE,   chat = NULL )  model_graded_fact(   template = NULL,   instructions = NULL,   grade_pattern = \"(?i)GRADE\\\\s*:\\\\s*([CPI])(.*)$\",   partial_credit = FALSE,   chat = NULL )"},{"path":"https://simonpcouch.github.io/rinspect/reference/scorer_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based scoring — scorer_model","text":"template Grading template use–glue() string take substitutions input, answer, criterion, instructions. instructions Grading instructions. grade_pattern regex pattern extract final grade judge model's response. partial_credit Whether allow partial credit. chat ellmer chat used grade model output, e.g. ellmer::chat_claude().","code":""},{"path":"https://simonpcouch.github.io/rinspect/reference/scorer_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based scoring — scorer_model","text":"function grade model responses according given instructions. returned function takes solved Task outputs 2-element list, first element scores vector scores length nrow(task) second list ellmer chats led scores, also length nrow(task). function model_graded_qa()'s outputs can passed directly $eval().","code":""},{"path":[]},{"path":"https://simonpcouch.github.io/rinspect/reference/scorer_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based scoring — scorer_model","text":"","code":"# Quality assurance ----------------------------- if (!identical(Sys.getenv(\"ANTHROPIC_API_KEY\"), \"\")) {   library(ellmer)   library(tibble)    simple_addition <- tibble(     input = c(\"What's 2+2?\", \"What's 2+3?\"),     target = c(\"4\", \"5\")   )    tsk <- Task$new(     dataset = simple_addition,      solver = generate(chat = chat_claude()),      scorer = model_graded_qa()   )      tsk$eval() } #> [working] (0 + 0) -> 1 -> 1 | ■■■■■■■■■■■■■■■■                  50% #> [working] (0 + 0) -> 0 -> 2 | ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% #> Error in loadNamespace(x): there is no package called ‘rstudioapi’  # Factual response ------------------------------- if (!identical(Sys.getenv(\"ANTHROPIC_API_KEY\"), \"\")) {   library(ellmer)   library(tibble)    r_history <- tibble(     input = c(       \"Who created the R programming language?\",       \"In what year was version 1.0 of R released?\"     ),     target = c(\"Ross Ihaka and Robert Gentleman.\", \"2000.\")   )    tsk <- Task$new(     dataset = r_history,      solver = generate(chat = chat_claude()),      scorer = model_graded_fact()   )      tsk$eval() } #> [working] (0 + 0) -> 1 -> 1 | ■■■■■■■■■■■■■■■■                  50% #> [working] (0 + 0) -> 0 -> 2 | ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% #> [working] (0 + 0) -> 1 -> 1 | ■■■■■■■■■■■■■■■■                  50% #> [working] (0 + 0) -> 0 -> 2 | ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% #> Error in loadNamespace(x): there is no package called ‘rstudioapi’"}]
